// Whitespace
WHITESPACE = _{ " " }
newline    = _{ "\n" }
// Program:
program    = _{ SOI ~ (decl ~ newline)+ ~ newline? ~ EOI }
decl       = _{ func_decl | type_decl | type_alias | expr | "" }
type_alias =  { "type" ~ type_name ~ "=" ~ token_type }
type_decl  =  { var_name ~ "::" ~ token_type }
func_decl  =  { PUSH(var_name) ~ patterns ~ "=" ~ expr ~ (newline ~ PEEK ~ patterns ~ "=" ~ expr)* }
patterns   =  { pattern* }
pattern    = _{ var_name | literal | tuple_pattern | "(" ~ list_pattern ~ ")" | empty_list | wildcard }
empty_list = { "[]" }
wildcard   = { "_" }
tuple_pattern  =  { "(" ~ pattern ~ ("," ~ pattern)+ ~ ")" }
list_pattern = { pattern ~ ":" ~ (list_pattern | var_name | empty_list) }
// Expressions:
expr        = _{ infixop | aexpr }
aexpr       = _{ application | paren_expr | tuple_expr | cond | literal | var_name | list_expr | empty_list }
infixop     =  { aexpr ~ binop ~ expr }
application =  { var_name ~ expr+ }
paren_expr  =  { "(" ~ expr ~ ")" }
tuple_expr  =  { "(" ~ expr ~ ("," ~ expr)+ ~ ")" }
list_expr   =  { "[" ~ expr ~ ("," ~ expr)+ ~ "]" }
cond        =  { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr }
binop       = @{ "++" | "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" | ":" }
token_type  = _{ func_type | atype }
atype       = _{ paren_type | tuple_type | type_name }
func_type   =  { atype ~ "->" ~ atype }
paren_type  =  { "(" ~ token_type ~ ")" }
tuple_type  =  { "(" ~ token_type ~ ("," ~ token_type)+ ~ ")" }
// Literals
literal = _{ number | char | bool | string }
number  = @{ ASCII_DIGIT+ }
char    = @{ "'" ~ !("'" | "\\") ~ ANY ~ "'" }
bool    = @{ "True" | "False" }
string  = @{ "\"" ~ (!("\"" | "\\") ~ ASCII)* ~ "\"" }

type_name = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }
var_name  = @{ !reserved ~ ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC* }
reserved  = _{ "if" | "then" | "else" | "type" }
